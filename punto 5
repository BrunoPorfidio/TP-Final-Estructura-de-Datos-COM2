import heapq

class Paciente:
    def __init__(self, nombre, edad, gravedad, historial_clinico):
        self.nombre = nombre
        self.edad = edad
        self.gravedad = gravedad
        self.historial_clinico = historial_clinico

    def __lt__(self, otro):
        # Comparación inversa para que el paciente con mayor gravedad tenga mayor prioridad
        return self.gravedad > otro.gravedad

    def __str__(self):
        return (f"Paciente: {self.nombre}, Edad: {self.edad}, Gravedad: {self.gravedad}, "
                f"Historial: {self.historial_clinico}")


class GestorPacientes:
    def __init__(self):
        self.cola_prioridad = []

    def agregar_paciente(self, nombre, edad, gravedad, historial_clinico):
        nuevo_paciente = Paciente(nombre, edad, gravedad, historial_clinico)
        heapq.heappush(self.cola_prioridad, nuevo_paciente)
        print(f"Paciente {nombre} agregado con gravedad {gravedad}.")

    def atender_paciente(self):
        if self.cola_prioridad:
            paciente_atendido = heapq.heappop(self.cola_prioridad)
            print(f"Atendiendo a {paciente_atendido}")
        else:
            print("No hay pacientes en espera.")

    def mostrar_pacientes(self):
        if not self.cola_prioridad:
            print("No hay pacientes en la cola.")
        else:
            print("Lista de pacientes en espera:")
            for paciente in sorted(self.cola_prioridad, reverse=True):
                print(paciente)


# Ejemplo de uso
gestor = GestorPacientes()
gestor.agregar_paciente("Juan Pérez", 45, 8, "Hipertensión, diabetes tipo 2")
gestor.agregar_paciente("Ana López", 30, 5, "Fractura en brazo izquierdo")
gestor.agregar_paciente("Carlos Martínez", 60, 10, "Infarto reciente")

gestor.mostrar_pacientes()
gestor.atender_paciente()
gestor.mostrar_pacientes()
